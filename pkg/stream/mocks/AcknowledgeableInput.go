// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import stream "github.com/applike/gosoline/pkg/stream"

// AcknowledgeableInput is an autogenerated mock type for the AcknowledgeableInput type
type AcknowledgeableInput struct {
	mock.Mock
}

// Ack provides a mock function with given fields: msg
func (_m *AcknowledgeableInput) Ack(msg *stream.Message) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(*stream.Message) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AckBatch provides a mock function with given fields: msgs
func (_m *AcknowledgeableInput) AckBatch(msgs []*stream.Message) error {
	ret := _m.Called(msgs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*stream.Message) error); ok {
		r0 = rf(msgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Data provides a mock function with given fields:
func (_m *AcknowledgeableInput) Data() chan *stream.Message {
	ret := _m.Called()

	var r0 chan *stream.Message
	if rf, ok := ret.Get(0).(func() chan *stream.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *stream.Message)
		}
	}

	return r0
}

// Run provides a mock function with given fields: ctx
func (_m *AcknowledgeableInput) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *AcknowledgeableInput) Stop() {
	_m.Called()
}
